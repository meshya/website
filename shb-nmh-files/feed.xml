<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>شب نامه</title>
    <link href="https://meshya.com/feed.xml" rel="self" />
    <link href="https://meshya.com" />
    <updated>2025-07-06T13:28:48+03:30</updated>
    <author>
        <name>meshya</name>
    </author>
    <id>https://meshya.com</id>

    <entry>
        <title>درباره شب نامه</title>
        <author>
            <name>meshya</name>
        </author>
        <link href="https://meshya.com/drbrh-shb-nmh.html"/>
        <id>https://meshya.com/drbrh-shb-nmh.html</id>

        <updated>2025-07-06T13:09:26+03:30</updated>
            <summary>
                <![CDATA[
                    برای همه آدم هایی که توی زندگی گمشون کردم، تمام پکت هایی که به مقصد نرسیدن، و تمام&nbsp;هندشیک هایی که&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                
    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://meshya.com/media/posts/2/ChatGPT-Image-Jul-6-2025-01_26_47-PM.png" height="1024" width="1536" alt=""  sizes="(max-width: 48em) 100vw, 100vw" srcset="https://meshya.com/media/posts/2/responsive/ChatGPT-Image-Jul-6-2025-01_26_47-PM-xs.png 300w ,https://meshya.com/media/posts/2/responsive/ChatGPT-Image-Jul-6-2025-01_26_47-PM-sm.png 480w ,https://meshya.com/media/posts/2/responsive/ChatGPT-Image-Jul-6-2025-01_26_47-PM-md.png 768w">
      
    </figure>

  <p>
    برای همه آدم هایی که توی زندگی گمشون کردم، تمام پکت هایی که به مقصد نرسیدن، و تمام&nbsp;هندشیک هایی که بسته شدن.<br><br>برای شب‌هایی که ناتمام موندن، مثل یه اتصال که منتظر ack آخره. برای مکالمه‌هایی که توی بافر موندن و هیچ‌وقت فِلاش نشدن. برای آدم‌هایی که توی لایهٔ اپلیکیشن دلم بودن ولی فایروال فاصله‌ها اجازه نداد پورتشون باز بمونه.<br><br>این بلاگ، یه جور لاگ‌فایله. یه دفتر خطا برای لحظه‌هایی که کرش کردن. برای تصمیم‌هایی که مثل کانکشن تایم‌اوت شدن. برای خاطره‌هایی که مثل دی‌ان‌اس بدون پاسخ، هرچی صداشون زدم، پاسخی ازشون نیومد.<br><br>اینجا، شب‌ها رو با نوشتن پینگ می‌گیرم. شاید یه روزی، یه پاسخ بیاد. شاید یه روزی، اون آدم‌ها دوباره توی جدول روتینگ زندگی‌م قرار بگیرن. و شاید هم، فقط اینجا بنویسم که یادم نره چطور یه‌سری از کانکشن‌ها، هیچ‌وقت استیبل نمی‌شن.<br><br> <br> شاید اگه مسیرها رو مسدود نمی‌کردن، یه‌سری از این پکت‌ها بالاخره می‌رسیدن. شاید اگه بین من و اون آدم‌ها یه NAT نبود که هیچ‌چی رو مستقیم عبور نمی‌ده، می‌تونستم یه‌بار دیگه بدون واسطه، یه hello بفرستم.<br><br>ولی خب، قوانین جدید می‌گن که باید هر ارتباطی از یه پراکسی خاص رد شه. می‌گن همه‌چی باید مانیتور بشه، حتی سیگنال‌هایی که از قلب آدم میاد. انگار TCP/IP هم باید مجوز بگیره، قبل از این‌که جرات کنه دست دو نفر رو به هم برسونه.<br><br>گاهی فکر می‌کنم شاید اون آدم‌ها هنوز اون‌ور وای‌فای منتظرن. فقط چون یه دی‌ان‌اس نمی‌تونه آدرس درستشونو resolve کنه، من فکر می‌کنم دیگه نیستن. یا شاید هستن، ولی زیر یه سقف محدودیت، جایی که حتی فکر کردن به یه ارتباط آزاد، خودش یه نوع حمله‌ی احتمالی به پروتکل‌ محسوب می‌شه.<br><br>در دنیایی که حتی پینگ ساده به یه سرور قدیمی، ممکنه یه اخطار امنیتی تلقی شه، باید به چی دل خوش کرد؟ شاید فقط به نوشتن. فقط به اینکه هنوز یه جایی هست، که اگه درست رمزگذاری کنی، می‌تونی حرفتو بزنی.<br><br>و این بلاگ، یه تونله. یه تونل کوچیک، از دل تاریکی شب، به سمت هر کسی که هنوز منتظره تا بالاخره یه سیگنال امن و بدون فیلتر دریافت کنه. نه برای باز کردن یه سایت خاص… برای باز کردن یه دل.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>تجربه‌ واقعی از یک داکرایز دردناک: چطور سرویس‌های پرگار رو روی سرور ایران بالا آوردیم</title>
        <author>
            <name>meshya</name>
        </author>
        <link href="https://meshya.com/tjrbh-wqaay-z-ykh-dkhryz-drdnkh-chtwr-srwyshmwn-rw-rwy-srwr-yrn-bl-awrdym.html"/>
        <id>https://meshya.com/tjrbh-wqaay-z-ykh-dkhryz-drdnkh-chtwr-srwyshmwn-rw-rwy-srwr-yrn-bl-awrdym.html</id>

        <updated>2025-07-05T19:30:35+03:30</updated>
            <summary>
                <![CDATA[
                    اوایل تصمیم گرفتیم که همه سرویس‌های اصلی شرکت رو به صورت کامل داکرایز کنیم. هدف این بود که از ابتدا&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                
  <p class="align-right">
    اوایل تصمیم گرفتیم که همه سرویس‌های اصلی شرکت رو به صورت کامل داکرایز کنیم. هدف این بود که از ابتدا همه چیز مرتب و یکپارچه روی سرورهای داخل ایران دیپلوی بشه؛ یعنی بدون نصب دستی چیزی، فقط با اجرای چند دستور همه سرویس‌ها بالا بیان.<br><br>اما خیلی زود فهمیدیم که بزرگ‌ترین چالش ما، خود اینترنت ایران و تحریم‌ها هستن!<br>
  </p>

    <h2 id="mrhlh-wl-dkhr-nsb-nmyshdlessbrgreater" class="align-right">
      مرحله اول: داکر نصب نمی‌شد<br>
    </h2>

  <p class="align-right">
    اولین قدم نصب Docker بود. Docker یک پلتفرم کانتینرسازی محبوبه که به ما کمک می‌کنه نرم‌افزارها و سرویس‌هامون رو در محیطی جدا از سیستم‌عامل و قابل حمل اجرا کنیم.<br><br>طبق مستندات رسمی داکر، باید با افزودن ریپوزیتوری رسمی داکر به <em>package manager</em>&nbsp;سیستم عامل آنرا نصب میکردیم
  </p>

  <p class="align-right">
    با توجه به انتخاب debian برای سرور های شرکت پرگار باید از این مسیر استفداه میکردیم:
  </p>
<pre class="line-numbers  language-bash"><code># Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre>

  <p class="align-right">
    اما این روش به خاطر تحریم و فیلترینگ جواب نداد و ارتباط با سرور رسمی داکر برقرار نمی‌شد. نسخه‌ای هم که در مخازن Debian با نام docker.io وجود داره، قدیمیه و برای محیط‌های Production پیشنهاد نمی‌شه.<br>
  </p>

    <h2 id="mrhlh-dwm-nsb-dkhr-b-khmkh-prkhsy-w-proxychains" class="align-right">
      مرحله دوم: نصب داکر با کمک پراکسی و proxychains
    </h2>

  <p class="align-right">
    برای حل این مشکل، از یک سرور خارجی که در خارج از ایران قرار داشت، کمک گرفتیم. با استفاده از ابزار های ssh روی سرور خودمون یک پراکسی از نوع SOCKS5 ایجاد کردیم.<br><br>برای اینکه از این پراکسی استفاده کنیم، روی سرور داخل ایران ابزار proxychains نصب کردیم. proxychains ابزاریه که می‌تونه هر برنامه‌ای که از اینترنت استفاده می‌کنه رو مجبور کنه ترافیکش رو از یک پراکسی مثل SOCKS5 بفرسته.<br><br>سپس proxychains رو اینجوری کانفیگ کردیم:
  </p>
<pre class="line-numbers  language-ini"><code>proxy_dns
random_chain
[ProxyList]
socks5 127.0.0.1 2080</code></pre>

  <p class="align-right">
    با این روش نصب داکر با موفقیت انجام شد
  </p>

  <p class="align-right">
    اما این تازه اول ماجراست، بعد از این باید برای اتصال به داکر هاب راهی پیدا میکردیم چون این&nbsp; سرویس هم در ایران از دسترس خارجه
  </p>

    <h2 id="mrhlh-swm-prwkhsykhrdn-dockerd-w-containerd" class="align-right">
      مرحله سوم: پروکسی‌کردن dockerd و containerd
    </h2>

  <p class="align-right">
    تصمیم گرفتیم که پراکسی کردن رو یک لایه جلوتر ببریم. به این فکر افتادیم که خود داکر و زیرسیستمش یعنی containerd رو از پشت پراکسی اجرا کنیم.<br><br>dockerd سرویس اصلی داکره که تمام عملیات‌های مربوط به build، run و pull رو مدیریت می‌کنه. containerd هم موتور زمان‌اجرای کانتینرهاست که توسط داکر استفاده می‌شه.<br><br>برای این کار، فایل systemd مربوط به سرویس داکر رو اینطور تغییر دادیم:<br><br>
  </p>
<pre class="line-numbers  language-ini"><code># docker.service
...
ExecStart=/bin/proxychains /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
...
# containerd.service
...
ExecStart=/bin/bash /usr/bin/containerd
...</code></pre>

  <p class="align-right">
    اما این روش جواب نداد. داکر بالا می‌اومد ولی موقع build کردن، خطای timeout مربوط به اتصال اینترنت می‌داد. متوجه شدیم که proxychains نمی‌تونه ترافیک داکر رو کنترل کنه یا حداقل نیازمند تنظیماتیه که خارج از دانش ماست.
  </p>

    <h2 id="mrhlh-chhrm-stfdh-z-rjystry-brarwn" class="align-right">
      مرحله چهارم: استفاده از رجیستری ابرآروان
    </h2>

  <p>
    اینجا تصمیم گرفتیم که به جای اتصال مستقیم به Docker Hub، از ابرآروان استفاده کنیم. ابرآروان یک شرکت ایرانی ارائه‌دهنده خدمات ابریه که رجیستری داکر داخلی هم ارائه می‌ده.<br><br>این مرحله به خوبی کار کرد. اما مرحله بعدی یعنی Build ایمیج‌ها با مشکل جدیدی روبه‌رو شد.<br>
  </p>

    <h2 id="mrhlh-pnjm-mshkhl-pip-w-npm-dr-yrn" class="align-right">
      مرحله پنجم: مشکل pip و npm در ایران
    </h2>

  <p class="align-right">
    موقع Build کردن داکر، سرویس‌هایی داشتیم که نیاز داشتن از pip و npm بسته‌هایی رو دانلود کنن. pip ابزار مدیریت پکیج‌های پایتونه و npm برای جاوااسکریپت استفاده می‌شه.<br><br>در لاگ‌ها دیدیم که اتصال این ابزارها به اینترنت قطع شده. بررسی بیشتر نشون داد که فایروال ملی ایران دسترسی به خیلی از مخازن npm و PyPI رو مسدود کرده، مخصوصاً در هفته‌های اخیر.
  </p>

  <p class="align-right">
    مشکل از اونجایی بزرگتر میشه که بیلد کردن ایمیج ها داخل کانتینر های داکر انجام میشه و پراکسی کردن کانتینر ها چالش های بیشتری داره
  </p>

    <h2 id="mrhlh-shshm-stfdh-z-redsocks-w-iptables" class="align-right">
      مرحله ششم: استفاده از redsocks و iptables
    </h2>

  <p class="align-right">
    برای حل این مشکل رفتیم سراغ ابزار redsocks. این ابزار می‌تونه ترافیک TCP رو دریافت کنه و به جای خروج مستقیم، از یک SOCKS5 یا HTTP proxy عبورش بده. برای اینکه ترافیک سرور رو به سمت redsocks هدایت کنیم، از iptables کمک گرفتیم.<br><br>iptables ابزار مدیریت فایرواله که می‌تونه قوانین متنوعی برای هدایت و فیلتر کردن ترافیک شبکه تعریف کنه.<br><br>ما قوانین زیر رو به جدول NAT اضافه کردیم:
  </p>
<pre class="line-numbers  language-bash"><code>iptables -t nat -F

iptables -t nat -N REDSOCKS
iptables -t nat -A REDSOCKS -d 0.0.0.0/8 -j RETURN
iptables -t nat -A REDSOCKS -d 10.0.0.0/8 -j RETURN
iptables -t nat -A REDSOCKS -d 127.0.0.0/8 -j RETURN
iptables -t nat -A REDSOCKS -d 169.254.0.0/16 -j RETURN
iptables -t nat -A REDSOCKS -d 172.16.0.0/12 -j RETURN
iptables -t nat -A REDSOCKS -d 192.168.0.0/16 -j RETURN
iptables -t nat -A REDSOCKS -d 224.0.0.0/4 -j RETURN
iptables -t nat -A REDSOCKS -d 240.0.0.0/4 -j RETURN
iptables -t nat -A REDSOCKS -d x.x.x.x -j RETURN
iptables -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 12345

iptables -t nat -A OUTPUT -p tcp -j REDSOCKS
</code></pre>

  <p class="align-right">
    این دستورات تمام اتصال هایی که مبداشون دستگاه ما هست رو به redsocks ارسال میکنه و قانون خط دوازدهم کمک میکنه که داده هایی که ssh برای سرور خارجمون ارسال میکنه به redsocks ارسال نشه.<br>این روش روی host جواب داد، ولی داکر که در namespace شبکه‌ای جدا کار می‌کنه، تحت تأثیر این قانون قرار نگرفت.
  </p>

    <h2 id="mrhlh-hftm-tnzym-shbkhh-buildkit-rwy-ykh-bridge-mshkhs" class="align-right">
      مرحله هفتم: تنظیم شبکه BuildKit روی یک bridge مشخص
    </h2>

  <p class="align-right">
    برای اینکه بتونیم کنترل بیشتری روی شبکه‌ی داکر داشته باشیم، تصمیم گرفتیم از BuildKit استفاده کنیم. BuildKit سیستم ساخت (build engine) جدید داکره که از شبکه‌های سفارشی پشتیبانی می‌کنه.<br><br>ما BuildKit رو با یک bridge مشخص به رنج IP دلخواه (10.18.0.0/16) تنظیم کردیم و قوانین iptables رو روی اون رنج اجرا کردیم تا ترافیکش به سمت redsocks بره.<br><br>ما قوانین iptables رو به روش زیر تغییر دادیم:
  </p>
<pre class="line-numbers  language-bash"><code>i#ptables -t nat -A OUTPUT -p tcp -j REDSOCKS
iptables -t nat -A PREROUTING -s 10.18.0.0/16 -p tcp -j REDSOCKS</code></pre>

  <p class="align-right">
    اما باز هم جواب نداد. درخواست‌های اینترنتی باز هم تایم‌اوت می‌شدن. به نظر می‌رسید این روش نیاز به تنظیمات بیشتری داشت.
  </p>

    <h2 id="mrhlh-akhr-stfdh-z-host-network-bry-buildkit" class="align-right">
      مرحله آخر: استفاده از host network برای BuildKit
    </h2>

  <p class="align-right">
    در نهایت تصمیم گرفتیم از گزینه‌ای استفاده کنیم که داکر رو مجبور می‌کنه در زمان build از شبکه‌ی میزبان (host network) استفاده کنه. در این حالت، کانتینر Build از همون interfaceها و قوانین شبکه‌ای سیستم اصلی استفاده می‌کنه.<br><br>تنظیمات iptables رو به حالت قبل برگردوندیم و از تنظیمات زیر برای داکر استفاده کردیم:<br><br>
  </p>
<pre class="line-numbers  language-bash"><code>docker buildx create --name hostnet --driver docker-container --buildkitd-flags '--oci-worker-net=host'
docker buildx use hostnet</code></pre>

  <p class="align-right">
    این‌بار بالاخره مشکل حل شد. pip و npm بدون مشکل کار کردن و ایمیج‌ها با موفقیت build شدن.
  </p>

    <h2 id="wqty-yntrnt-azd-khwdsh-ykh-zyrskht-st" class="align-right">
      وقتی اینترنت آزاد، خودش یک زیرساخت است
    </h2>

  <p class="align-right">
    مسیر داکرایز کردن سرویس‌های شرکت پرگار، برخلاف تصور اولیه، بیشتر شبیه به یک ماجراجویی پر پیچ و خم بود تا یک فرآیند فنی ساده. مشکلی که در بسیاری از کشورهای دیگر ظرف چند ساعت و با اجرای چند دستور ساده انجام می‌شود، در اینجا برای ما تبدیل شد به روزها تحقیق، آزمون و خطا، بازنویسی تنظیمات، ساخت پراکسی، جابجایی رجیستری‌ها، مانیتور لاگ‌ها و حتی نوشتن iptables به خط فرمان.<br><br>هزینه این مسیر فقط زمان و نیروی انسانی نبود؛ زیرساخت‌هایی هم که می‌تونستن برای توسعه‌ی قابلیت‌های جدید مصرف بشن، به جای آن صرف جنگیدن با محدودیت‌های غیرضروری اینترنت شدن.<br><br>اینترنت آزاد، فقط برای سرگرمی یا شبکه‌های اجتماعی نیست؛ بلکه یک زیرساخت پایه برای توسعه‌ی نرم‌افزار، نوآوری، همکاری بین‌المللی و رقابت جهانیه.<br>وقتی اتصال ساده به یک رجیستری یا مخزن پکیج باعث توقف کامل چرخه تولید می‌شه، یعنی ما داریم زیر پای توسعه‌مون تیشه می‌زنیم.<br>و تا روزی که این آزادی محدود باشه، هر docker build ساده‌ای ممکنه به کابوس شبانهٔ تیم‌های فنی تبدیل بشه.<br><br>
  </p>
            ]]>
        </content>
    </entry>
</feed>
